#Assessment 2 - Created by Nathan Heckman

#Import regex and string matching module
import re             

#Simple Token object. Token type, value, and position
class Token(object):    
    def __init__(self, type, val, pos):
        self.type = type
        self.val = val
        self.pos = pos
        
    #define regulated print format for object
    def __str__(self):  
        return '%s(%s) at %s' % (self.type, self.val, self.pos)

#Define error handling in case no tokens are matched
class LexerError(Exception):
    def __init__(self, pos):
        self.pos = pos
        
#Define lexical analysis object
class Lexer(object):
    #Rules is essentially a regex and type pair. Type describes the token defined by the regex
    #Whitespace is skipped so errors can be avoided. Whitespace is also not necessary in Java.
    def __init__(self, rules, skip_whitespace=True):
        self.rules = []
        #add each element to the rules array
        for regex, type in rules:
            self.rules.append((re.compile(regex), type))
        self.skip_whitespace = skip_whitespace
        #Define a regex whitespace
        self.re_ws_skip = re.compile('\S')
    #Initialize lexer with buffer input
    def input(self, buf):
        self.buf = buf
        self.pos = 0
    #Return next token object found in the input. Error handling included
    def token(self):
        #Check for empty input string
        if self.pos >= len(self.buf):
            return None
        #Function to skip the whitespace present in the input string
        if self.skip_whitespace:
            m = self.re_ws_skip.search(self.buf, self.pos)
            if m:
                self.pos = m.start()
            #If only whitespace, return None
            else:
                return None
        #Create tokens for found regex matches in the input string, return the token if found
        for regex, type in self.rules:
            m = regex.match(self.buf, self.pos)
            if m:
                token = Token(type, m.group(), self.pos)
                self.pos = m.end()
                return token
        #If none of the above works, error
        raise LexerError(self.pos)
    def tokens(self):
        #Returns an iterator to the tokens found in the input. Allows token list to be created
        while 1:
            token = self.token()
            if token is None: break
            yield token
            
def increment_token():
    global index
    global nextToken
    global tokens
    index += 1
    nextToken = tokens[index]            
    
def switch_():
    global index
    global nextToken
    global rules
    global lexer
    global tokens
    if(nextToken.val != 'switch'):
        error(tokens[index])
    else:
        increment_token()
        if(nextToken.val != '('):
            error(tokens[index])
        else:
            increment_token()
            if(nextToken.type != 'IDENTIFIER'):
                error(tokens[index])
            else:
                increment_token()
                block() #DONE
def foreach():
    global index
    global nextToken
    global rules
    global lexer
    global tokens
    if(nextToken.type != 'IDENTIFIER'):
        error(tokens[index])
    else:
        increment_token()
        if(nextToken.val != ':'):
            error(tokens[index])
        else:
            increment_token()
            if(nextToken.type != 'IDENTIFIER'):
                error(tokens[index])
            else:
                increment_token()
                if(nextToken.val != ')'):
                    error(tokens[index])
                else:
                    increment_token()
                    block() #DONE
def for_():
    global index
    global nextToken
    global rules
    global lexer
    global tokens
    if(nextToken.val != 'for'):
        error(tokens[index])
    else:
        increment_token()
        if(nextToken.val != '('):
            error(tokens[index])
        else:
            increment_token()
            if(nextToken.val == 'type'): #Could be wrong sytax, need to check
                increment_token()
                foreach()
            else:
                expression()
                if(nextToken.val != ';'):
                    error(tokens[index])
                else:
                    increment_token()
                    expression()
                    if(nextToken.val != ';'):
                        error(tokens[index])
                    else:
                        incrementToken()
                        expression()
                        if(nextToken.val != ')'):
                            error(tokens[index])
                        else:
                            increment_token()
                            block() #DONE
def while_():
    global index
    global nextToken
    global rules
    global lexer
    global tokens
    if(nextToken.val != 'while'):
        error(tokens[index])
    else:
        increment_token()
        if(nextToken.val != '('):
            error(tokens[index])
        else:
            increment_token()
            expression()
            if(nextToken.val != ')'):
                error(tokens[index])
            else:
                increment_token()
                block() #DONE #DONE
def do_while():
    global index
    global nextToken
    global rules
    global lexer
    global tokens
    if(nextToken.val != 'do'):
        error(tokens[index])
    else:
        increment_token()
        block()
        if(nextToken.val != 'while'):
            error(tokens[index])
        else:
            increment_token()
            if(nextToken.val != '('):
                error(tokens[index])
            else:
                increment_token()
                expression()
                if(nextToken.val != ')'):
                    error(tokens[index])
                else:
                    increment_token()
                    if(nextToken.val != ';'):
                        error(tokens[index])
                    else:
                        increment_token() #DONE
def if_():#DONE
    global index
    global nextToken
    global rules
    global lexer
    global tokens
    if(nextToken.val != 'if'):                  #Check for if keyword
        error(tokens[index])
    else:
        increment_token()
        if(nextToken.val != '('):
            error(tokens[index])
        else:
            expression()
            if(nextToken.val != ')'):               #Check for right parenthesis
                error(tokens[index])                #End analysis and error out if not present
            else:
                increment_token()
                block()
                if(nextToken.val == 'else'):            #No error if else isn't present
                    increment_token()
                    block() #Continue analysis #DONE? #DONE #DONE #DONE
def assignment():
    global index
    global nextToken
    global rules
    global lexer
    global tokens
    if(nextToken.type != 'IDENTIFIER'):                  #Check for if keyword
        error(tokens[index])
    else:
        increment_token() #DONE
def return_():
    global index
    global nextToken
    global rules
    global lexer
    global tokens
    if(nextToken.val != 'return'):                  #Check for if keyword
        error(tokens[index])
    else:
        if(nextToken.type == 'IDENTIFIER'):         #Check syntax 
            increment_token()
            if(nextToken.val != ';'):
                error(tokens[index])
        elif(nextToken.val != ';'):                   #Check syntax
            increment_token()
        else:
            error(tokens[index])
def program():
    global index
    global nextToken
    global rules
    global lexer
    global tokens
    if(nextToken.val != 'void'):
        error(tokens[index])                #Send token object to error message
    else:
        increment_token()
        if(nextToken.val != 'main'):
            error(tokens[index])
        else:
            increment_token()
            if(nextToken.val != '('):
                error(tokens[index])
            else:
                increment_token()
                if(nextToken.val != ')'):
                    error(tokens[index])
                else:
                    increment_token()
                    block()
    print('Success')                        #If program makes it back here, syntax analysis was successful #DONE #DONE
def block():
    global index
    global nextToken
    global rules
    global lexer
    global tokens
    if(nextToken.val != '{'):
        error(tokens[index])
    else:
        increment_token()
        statement()
        if(nextToken.val != '}'):
            error(tokens[index])
        else:
            if(nextGood()):
                increment_token() #DONE #DONE
def expression():
    global index
    global nextToken
    global rules
    global lexer
    global tokens
    switch(nextToken.type):
        case 'INTEGER LITERAL':
            break
        case 'FLOAT LITERAL':
            break
        case 'STRING LITERAL':
            break
        case 'IDENTIFIER':
            assignment()
            break
        case default:
            error(tokens[index])
            break
def statement():                        #Covers requirements for assignment
    global index
    global nextToken
    global rules
    global lexer
    global tokens
    if(nextToken.val == 'if'):
        if_()
    elif(nextToken.val == 'while'):
        while_()
    elif(nextToken.val == 'do'):
        do_()
    elif(nextToken.val == 'for'):
        for_()
    elif(nextToken.val == 'switch'):
        switch_()
    elif(nextToken.val == 'return'):
        return_()
    elif(nextToken.val == '{'):
        block()
    else:
        if(nextGood()): #fix this, need to check if the end of token array or not
            increment_token()
            statement() #NOT DONE
def error(wrong):                                                                            #Programmatically show where the syntax analysis fails
    print('Invalid syntax (' + str(wrong.val) + ') at position ' + str(wrong.pos))           #Print failure statement with position and token
    exit() #DONE
def nextGood(): #fix this, need to check 
    global index
    global tokens
    if(index + 1 < len(tokens)-1):
        return True
    else:
        return False
if __name__=="__main__":                    #Begin the main method
    index = 0                               #Track index throughout analysis
    tokens = []                             #Array to store the computed tokens
    
    #Java defined regex rules. Based on assessment requirements
    rules = [  
    ('//[^\n]*',                          'SINGLE LINE COMMENT'),
    ('(\d*)\.\d+f?',                      'FLOAT LITERAL'),
    ('"[^\n]*"',                          'STRING LITERAL'),
    ('if',                                'IF'),
    ('else',                              'ELSE'),
    ('while',                             'WHILE'),
    ('do',                                'DO'),
    ('switch',                            'SWITCH'),
    ('for',                               'FOR'),
    ('\d+',                               'INTEGER LITERAL'),
    ('[a-zA-Z_]\w*',                      'IDENTIFIER'),
    ('\+\+',                              'INCREMENT'),
    ('\-\-',                              'DECREMENT'),
    ('\+',                                'PLUS'),
    ('\-',                                'MINUS'),
    ('\*',                                'MULTIPLY'),
    ('\/',                                'DIVIDE'),
    ('\(',                                'LEFT PAREN'),
    ('\)',                                'RIGHT PAREN'),
    ('\{',                                'LEFT CURLY'),
    ('\}',                                'RIGHT CURLY'),
    ('\[',                                'LEFT BRACKET'),
    ('\]',                                'RIGHT BRACKET'),
    ('\<',                                'LEFT WEDGE'),
    ('\>',                                'RIGHT WEDGE'),
    ('\,',                                'COMMA'),
    ('\;',                                'SEMICOLON'),
    ('\.',                                'PERIOD'),
    ('\!\=',                              'NOT EQUALS'),
    ('\=',                                'EQUALS'),
    ('.',                                 'UNKNOWN')  #if code gets here, the input is unknown. End analysis
    ]
    
    lexer = Lexer(rules, skip_whitespace=True)   #Create lexer object
    
    #Sample Java Program
    lexer.input('''
    void main(){
    }
    ''')
    try:
        for token in lexer.tokens():                    #Add each token to list and print with object format
            tokens.append(token)
            #Tokens is now populated with token objects
    except LexerError as error:
        print('Error at position %s' % error.pos)       #Error checking for invalid or unrecognized token
    nextToken = tokens[index]                           #Start analysis at beginning of token list
    
    for token in tokens:                                #Uncomment to view tokens
        print(token)
        
    print()
    program()                                           #Begin program
